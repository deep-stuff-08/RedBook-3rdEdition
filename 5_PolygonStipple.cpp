#include<GL/freeglut.h>

#define SOLID 0
#define BUG 1
#define HALFTONE 2
#define AVENGER 3

short type = AVENGER;

int main(int argc, char **argv) {
	void Init();
	void Display();
	void Reshape(int w, int h);
	void Keyboard(unsigned char key, int x, int y);
	
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowPosition(50, 50);
	glutInitWindowSize(800, 600);
	glutCreateWindow("Hollow Circle");
	Init();
	glutDisplayFunc(Display);
	glutReshapeFunc(Reshape);
	glutKeyboardFunc(Keyboard);
	glutMainLoop();
	return 0;
}

void Display() {
	GLubyte fly[] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60,
		0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20,
		0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20,
		0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22,
		0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
		0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
		0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
		0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC,
		0x19, 0x81, 0x81, 0x98, 0x0C, 0xCl, 0x83, 0x30,
		0x07, 0xE1, 0x87, 0xE0, 0x03, 0x3F, 0xFC, 0xC0,
		0x03, 0x31, 0x8c, 0xC0, 0x03, 0x33, 0xCC, 0xC0,
		0x06, 0x64, 0x26, 0x60, 0x0C, 0xCC, 0x33, 0x30,
		0x18, 0xCC, 0x33, 0x18, 0x10, 0xC4, 0x23, 0x08,
		0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0C, 0x08,
		0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08
	};

	GLubyte avenger[128] = {
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x07, 0xCF, 0xF0, 0x00,
		0x04, 0x70, 0x0C, 0x00,
		0x04, 0x40, 0x03, 0x00,
		0x02, 0x27, 0xE0, 0x80,
		0x02, 0x28, 0x18, 0x40,
		0x05, 0x10, 0x7E, 0x20,
		0x05, 0x10, 0x53, 0x20,
		0x08, 0x8F, 0xCB, 0x10,
		0x08, 0x80, 0x04, 0x90,
		0x11, 0x40, 0x02, 0x88,
		0x12, 0x40, 0x04, 0x48,
		0x12, 0x23, 0xCC, 0x48,
		0x12, 0x22, 0x54, 0x48,
		0x12, 0x11, 0x64, 0x48,
		0x12, 0x11, 0x44, 0x48,
		0x12, 0x08, 0xC8, 0x48,
		0x11, 0x08, 0xC8, 0x88,
		0x09, 0x04, 0x48, 0x90,
		0x08, 0x84, 0x09, 0x10,
		0x04, 0x82, 0x09, 0x20,
		0x04, 0x62, 0x0E, 0x20,
		0x02, 0x19, 0x08, 0x40,
		0x01, 0x07, 0x08, 0x80,
		0x00, 0xC0, 0x8B, 0x00,
		0x00, 0x30, 0x8C, 0x00,
		0x00, 0x0F, 0xC8, 0x00,
		0x00, 0x00, 0x78, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00
	};

	GLubyte halftone[] = {
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55
	};

	glClear(GL_COLOR_BUFFER_BIT);

	if(type == HALFTONE) {
		glColor3f(0.0f, 1.0f, 1.0f);
		glEnable(GL_POLYGON_STIPPLE);
		glPolygonStipple(halftone);
		glRectf(-1.0f, 1.0f, 1.0f, -1.0f);
		glDisable(GL_POLYGON_STIPPLE);
	} else if(type == BUG) {
		glColor3f(0.0f, 1.0f, 0.0f);
		glEnable(GL_POLYGON_STIPPLE);
		glPolygonStipple(fly);
		glRectf(-1.0f, 1.0f, 1.0f, -1.0f);
		glDisable(GL_POLYGON_STIPPLE);
	} else if(type == AVENGER) {
		glColor3f(1.0f, 0.0f, 0.0f);
		glEnable(GL_POLYGON_STIPPLE);
		glPolygonStipple(avenger);
		glRectf(-1.0f, 1.0f, 1.0f, -1.0f);
		glDisable(GL_POLYGON_STIPPLE);
	} else {
		glColor3f(1.0f, 1.0f, 1.0f);
		glRectf(-1.0f, 1.0f, 1.0f, -1.0f);
	}
	glutSwapBuffers();
}

void Init() {
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	glShadeModel(GL_FLAT);
}

void Reshape(int w, int h) {
	glViewport(0, 0, (GLsizei)w, (GLsizei)h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
}

void Keyboard(unsigned char key, int x, int y) {
	switch(key) {
	case '1':
		type = SOLID;
		glutPostRedisplay();
		break;
	case '2':
		type = HALFTONE;
		glutPostRedisplay();
		break;
	case '3':
		type = BUG;
		glutPostRedisplay();
		break;
	case '4':
		type = AVENGER;
		glutPostRedisplay();
		break;
	case 'f': case 'F':
		glutFullScreenToggle();
		break;
	case 27:
		glutLeaveMainLoop();
		break;
	}
}